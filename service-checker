#!/usr/bin/env python

import glob
import os
import sys
import urllib2
import yaml

# Output Functions

def indent(indentlevel=0):
    return '    ' * indentlevel

def error(message,indentlevel=0):
    print "\033[95mERROR: %s%s\033[0m" % (indent(indentlevel),message)
    sys.exit(1)

def info(message,indentlevel=0):
    print "\033[34mINFO:  %s%s\033[0m" % (indent(indentlevel),message)

def good(message,indentlevel=0):
    print "\033[32mGOOD:  %s%s\033[0m" % (indent(indentlevel),message)

def bad(message,indentlevel=0):
    print "\033[31mBAD:   %s%s\033[0m" % (indent(indentlevel),message)

# Check functions

def check_slug_links_to_domain(slug,domain):
    global exitcode
    info("Checking GOV.UK slug contains a link to the Service Domain",1)
    url = urllib2.urlopen("https://www.gov.uk%s" % slug)
    slug_text = url.read()
    if domain in slug_text.lower():
        good("The GOV.UK page (https://www.gov.uk%s) links to %s" % (slug,domain),2)
        return 0
    else:
        exitcode = exitcode + 1
        bad("The GOV.UK page (http://www.gov.uk%s) does not link to %s" % (slug,domain),2)
        return 1

def check_bare_ssl_domain_redirects_to_slug(slug,domain):
    global exitcode
    info("Checking that the bare Service Domain redirects back to the GOV.UK Slug",1)
    url = urllib2.urlopen("https://%s/" % domain)
    location = url.geturl()
    if location == slug:
        good("The bare Service Domain redirects to the GOV.UK slug.",2)
        return 0
    else:
        exitcode = exitcode + 1
        bad("The Service Domain does not redirect to the GOV.UK slug.",2)
        bad("https://%s/ -> %s" % (domain,location),3)
        return 1

def check_listening_on_http(slug,domain):
    global exitcode
    info("Checking that HTTP requests are denied or redirected to HTTPS",1)
    try:
        url = urllib2.urlopen("http://%s/" % domain, timeout=2)
        info("Service listens on HTTP, checking it redirects to HTTPS",2)
        location = url.geturl()
        ssl_location = "https://%s/" % domain
        if location == ssl_location:
            good("Non-SSL requests to the Service Domain redirect to SSL",2)
            return 0
        else:
            exitcode = exitcode + 1
            bad("Non-SSL requests to the Service Domain do not redirect to correct SSL location",2)
            bad("http://%s/ -> %s" % (domain, location),3)
            return 1
    except IOError:
        good("Service does not listen on HTTP",2)
        return 0

def check_for_HSTS_header(slug,domain):
    global exitcode
    info("Checking that Strict-Transport-Security is enforced",1)
    url = urllib2.urlopen("https://%s/" % domain)
    headers = url.info().headers
    header_array = {}
    for header in headers:
        key, value = header.split(': ', 1)
        header_array[key] = value
    if 'Strict-Transport-Security' in header_array.keys():
        good("Strict-Transport-Security (HSTS) Header is set",2)
        good("Strict-Transport-Security: %s" % header_array['Strict-Transport-Security'],3)
        return 0
    else:
        exitcode = exitcode + 1
        bad("Strict-Transport-Security (HSTS) Header is not set",2)
        return 1

if not os.path.isdir('./services'):
    error("./services directory does not exist")

yamlfiles = glob.glob("./services/*.yml")

if len(yamlfiles) == 0:
    error("No .yml files found in ./services/")

exitcode = 0

for yamlfile in yamlfiles:
    fh = open(yamlfile, "r")
    services = yaml.load_all(fh)
    for service in services:
        service_fails = 0
        # Validate YAML
        if 'title' in service.keys():
            title = service['title']
        else:
            error("title is not defined in file: %s" % yamlfile)
        if 'govuk_slug' in service.keys():
            govuk_slug = service['govuk_slug']
        else:
            error("govuk_slug is not defined in file: %s" % yamlfile)
        if 'service_domain' in service.keys():
            service_domain = service['service_domain']
        else:
            error("service_domain is not defined in file: %s" % yamlfile)

        info("Checking service: %s" % title)
        info("    Slug:   %s" % govuk_slug)
        info("    Domain: %s" % service_domain)
        service_fails += check_slug_links_to_domain(govuk_slug,service_domain)
        service_fails += check_bare_ssl_domain_redirects_to_slug(govuk_slug,service_domain)
        service_fails += check_listening_on_http(govuk_slug,service_domain)
        service_fails += check_for_HSTS_header(govuk_slug,service_domain)
        info("Results for %s" % title, 1)
        if service_fails == 0:
            good("Service passed all checks", 2)
        else:
            bad("Service failed %s checks" % service_fails, 2)

info("Summary results:")
if exitcode > 0:
    bad("Total checks failed: %s" % exitcode, 1)
else:
    good("All checks successful!", 1)
sys.exit(exitcode)
